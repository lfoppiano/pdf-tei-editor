#!/usr/bin/env python3

# CLI for running the Flask server in production mode with waitress.

import os, sys
from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from server.flask_app import app

if __name__ == '__main__':
    # host and port default to localhost:3001 unless overridden by CLI arguments
    host = sys.argv[1] if len(sys.argv) > 1 else "127.0.0.1"
    port = int(sys.argv[2]) if len(sys.argv) > 2 else 8000
    
    # Set up logging to file while keeping console output
    log_dir = project_root / "log"
    log_dir.mkdir(exist_ok=True)  # Create log directory if it doesn't exist
    log_file = log_dir / "server.log"
    
    # Create a custom print function that writes to both console and file
    original_stdout = sys.stdout
    original_stderr = sys.stderr
    
    class TeeOutput:
        def __init__(self, *files):
            self.files = files
        def write(self, obj):
            for f in self.files:
                f.write(obj)
                f.flush()
        def flush(self):
            for f in self.files:
                f.flush()
    
    # Open log file and redirect both stdout and stderr
    with open(log_file, 'w', buffering=1) as log_f:
        # In test environment, log only to file to keep console clean
        if os.environ.get('TEST_IN_PROGRESS'):
            sys.stdout = log_f
            sys.stderr = log_f
        else:
            # In normal production, tee to both console and file
            sys.stdout = TeeOutput(original_stdout, log_f)
            sys.stderr = TeeOutput(original_stderr, log_f)
        
        print()
        print("===================================================================================")
        print(f"Starting production server with waitress on {host}:{port}")
        print(f"Load https://your-domain.com/ to access the application")
        print(f"Server output being logged to: {log_file}")
        print("===================================================================================")
        print()
        
        try:
            # Import waitress here to avoid import errors if not installed
            from waitress import serve
            serve(app, host=host, port=port, threads=6)
        except ImportError:
            print("ERROR: waitress is not installed. Install it with: pip install waitress")
            sys.exit(1)
        except KeyboardInterrupt:
            print("\nShutting down production server...")
        finally:
            # Restore original stdout/stderr
            sys.stdout = original_stdout
            sys.stderr = original_stderr